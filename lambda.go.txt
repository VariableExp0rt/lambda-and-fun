//This file contains the code that has been built and made into a deployment package
//GOOS=linux go build -o main
//zip deployment.zip main
//jq -n --rawfile TemplateBody cfn-stack.json '{"Operation":"create", "StackName": "MyStack", $TemplateBody}' \
//| curl -v 'https://APIGATEWAYURI/StackAction' -H 'Content-Type: application/json' -d@-

package main

import (
	"encoding/json"
	"errors"
	"log"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	cldfmt "github.com/aws/aws-sdk-go/service/cloudformation"
)

var (
	// DefaultHTTPGetAddress Default Address
	DefaultHTTPGetAddress = "https://checkip.amazonaws.com"

	// ErrNoIP No IP found in response
	ErrNoIP = errors.New("No IP in HTTP response")

	// ErrNon200Response non 200 status code in response
	ErrNon200Response = errors.New("Non 200 Response found")
)

//Actions is a struct to hold the operation requested by the end user through the API GW
type Config struct {
	Operation string
	StackName      string
	TemplateBody *cloudformation.CreateStackInput.TemplateBody
}	

func handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {

	var config Config

	json.Unmarshal([]byte(request.Body), &config)
	log.Printf("Received request, processing action: %v stack", config.Operation)

	//TODO: This needs to be swapped with cloudformation CreateStack using the code worked on
	// for cloudformation/goformation
	sess := session.Must(session.NewSessionWithOptions(session.Options{Config: aws.Config{Region: aws.String("eu-west-2")}}))
	svc := cldfmt.New(sess)

	switch config.Operation {
	case "create":
		template := config.CreateConfigurationTemplate()
		j, err := template.JSON()
		if err != nil {
			fmt.Printf("Error marshalling template to JSON: %v", err)
		}
		stack, err := svc.CreateStack(&cldfmt.CreateStackInput{
			//TODO: use similar below logic - for unmarshalling JSON as the Template body to create stack
			Capabilities: aws.StringSlice([]string{"CAPABILITY_NAMED_IAM"}),
			TemplateBody:	config.TemplateBody, 
		})
		if err != nil {
			log.Printf("Unable to create cluster %v: %v", stack, err)
		}

		return events.APIGatewayProxyResponse{Body: j}, err

	case "delete":
		stack, err := svc.DeleteStack(&cldfmt.DeleteStackInput{
			TemplateBody:	config.TemplateBody,
		})
		if err != nil {
			log.Printf("Unable to delete stack %v: %v", stack, err)
		}
		
		return events.APIGatewayProxyResponse{Body: j}, err
	}

	return events.APIGatewayProxyResponse{StatusCode: 200}, ErrNon200Response

}

func main() {
	lambda.Start(handler)
}
